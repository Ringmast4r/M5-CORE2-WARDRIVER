#include <M5Core2.h>
#include <vector>
#include <TinyGPS++.h>
#include <WiFi.h>
#include <FS.h>
#include <SD.h>

TinyGPSPlus gps;
HardwareSerial GPSModule(1);

#define SCREEN_WIDTH 320
#define SCREEN_HEIGHT 240
#define ORIGINAL_FONT_SIZE 1 // Original font size for the matrix animation
#define SECOND_SCREEN_FONT_SIZE 2 // Font size for the second screen

std::vector<char> matrixChars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                                 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
                                 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                                 'u', 'v', 'w', 'x', 'y', 'z'};

int fontSize = ORIGINAL_FONT_SIZE; // Smallest font size
int streamCount = SCREEN_WIDTH / fontSize;

struct MatrixStream {
  int x;
  int y;
  char character;
  int speed; // Speed for each stream
};

std::vector<MatrixStream> streams;

const int numLines = 7;
char displayBuffer[numLines][100];
char nextBuffer[numLines][100];
File file;
const char *filename = "/wifi_data.csv";
bool scanning = false;

void setup() {
    M5.begin();
    Serial.begin(115200);
    GPSModule.begin(9600, SERIAL_8N1, 13, 14);

    M5.Lcd.fillScreen(TFT_BLACK);
    M5.Lcd.setTextSize(fontSize); // Set the initial font size

    for (int i = 0; i < streamCount; i++) {
        MatrixStream stream;
        stream.x = random(SCREEN_WIDTH);
        stream.y = random(SCREEN_HEIGHT);
        stream.character = matrixChars[random(matrixChars.size())];
        stream.speed = random(1, 5); // Assign a random speed between 1 and 4
        streams.push_back(stream);
    }

    if (!SD.begin()) {
        M5.Lcd.println("SD Card Fail");
        return;
    } else {
        file = SD.open(filename, FILE_WRITE);
        if (file.size() == 0) {
            file.println("SSID,BSSID,SignalStrength,Latitude,Longitude,Time,Date");
        }
        file.close();
    }

    memset(displayBuffer, 0, sizeof(displayBuffer));
    memset(nextBuffer, 0, sizeof(nextBuffer));
}

void loop() {
    M5.update();

    if (M5.BtnA.wasPressed() || M5.BtnB.wasPressed() || M5.BtnC.wasPressed()) {
        scanning = true;
        clearBuffers();
        M5.Lcd.fillScreen(TFT_BLACK);
        M5.Lcd.setTextSize(SECOND_SCREEN_FONT_SIZE); // Set the font size for the second screen
    }

    if (scanning) {
        while (GPSModule.available() > 0) {
            if (gps.encode(GPSModule.read())) {
                displayGPSInfo();
            }
        }

        scanForWiFiNetworks();
        updateDisplay();
        displayCreatorInfo();
    } else {
        // Display "BOOTING" in red at the middle of the screen with a larger and bold font
        M5.Lcd.setTextColor(TFT_RED);
        M5.Lcd.setTextDatum(TC_DATUM); // Set text alignment to center
        M5.Lcd.setTextSize(3); // Set the text size to be larger
        M5.Lcd.drawString("BOOTING", SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);

        // Set the text size back to the original size for the green text
        M5.Lcd.setTextSize(fontSize);

        for (const MatrixStream &stream : streams) {
            M5.Lcd.setTextColor(TFT_BLACK);
            M5.Lcd.drawString(String(stream.character), stream.x, stream.y);
        }

        for (MatrixStream &stream : streams) {
            stream.y += stream.speed; // Use the assigned speed

            if (stream.y >= SCREEN_HEIGHT) {
                stream.y = 0;
                stream.x = random(SCREEN_WIDTH);
                stream.character = matrixChars[random(matrixChars.size())];
                stream.speed = random(1, 5); // Assign a new random speed
            }

            M5.Lcd.setTextColor(TFT_GREEN);
            M5.Lcd.drawString(String(stream.character), stream.x, stream.y);
        }

        delay(10); // Adjust the delay to control the animation speed
    }
}

void displayGPSInfo() {
    M5.Lcd.setTextSize(SECOND_SCREEN_FONT_SIZE); // Set the font size for GPS info
    sprintf(nextBuffer[0], "Latitude: %.6f", gps.location.lat());
    sprintf(nextBuffer[1], "Longitude: %.6f", gps.location.lng());
    sprintf(nextBuffer[2], "Altitude: %.2f ft", gps.altitude.meters() * 3.281);
    sprintf(nextBuffer[3], "Satellites: %d", gps.satellites.value());
    sprintf(nextBuffer[4], "Speed: %.2f mph", gps.speed.kmph() * 0.621371);

    if (gps.date.isValid() && gps.time.isValid()) {
        int hour = gps.time.hour() - 5; // Adjust for EST
        if (hour < 0) hour += 24;
        bool isPM = hour >= 12;
        if (hour > 12) hour -= 12;
        if (hour == 0) hour = 12;
        sprintf(nextBuffer[5], "%02d/%02d/%04d %02d:%02d:%02d %s",
                gps.date.month(), gps.date.day(), gps.date.year(),
                hour, gps.time.minute(), gps.time.second(),
                isPM ? "PM" : "AM");
    }
}

void scanForWiFiNetworks() {
    int n = WiFi.scanNetworks();
    sprintf(nextBuffer[6], "WiFi Networks: %d", n);

    file = SD.open(filename, FILE_APPEND);
    if (file) {
        for (int i = 0; i < n; ++i) {
            file.printf("%s,%s,%d,%.6f,%.6f,%02d:%02d:%02d,%02d/%02d/%04d\n",
                        WiFi.SSID(i).c_str(),
                        WiFi.BSSIDstr(i).c_str(),
                        WiFi.RSSI(i),
                        gps.location.lat(),
                        gps.location.lng(),
                        gps.time.hour(), gps.time.minute(), gps.time.second(),
                        gps.date.month(), gps.date.day(), gps.date.year());
        }
        file.close();
    }
    WiFi.scanDelete();
}

void updateDisplay() {
    for (int i = 0; i < numLines; i++) {
        if (strcmp(displayBuffer[i], nextBuffer[i]) != 0) {
            M5.Lcd.setTextColor(TFT_WHITE);
            M5.Lcd.setCursor(0, i * 20);
            M5.Lcd.fillRect(0, i * 20, 320, 20, TFT_BLACK);
            M5.Lcd.print(nextBuffer[i]);
            strcpy(displayBuffer[i], nextBuffer[i]);
        }
    }
}

void displayCreatorInfo() {
    M5.Lcd.setTextColor(TFT_RED);
    M5.Lcd.setCursor(0, M5.Lcd.height() - 20);
    M5.Lcd.fillRect(0, M5.Lcd.height() - 20, 320, 20, TFT_BLACK);
    M5.Lcd.setTextSize(SECOND_SCREEN_FONT_SIZE); // Set the font size for the creator info
    M5.Lcd.println("Wardriving by @Ringmast4r");
}

void clearBuffers() {
    for (int i = 0; i < numLines; i++) {
        memset(nextBuffer[i], 0, sizeof(nextBuffer[i]));
    }
}
